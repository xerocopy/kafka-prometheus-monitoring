version: "2"

services:
  zookeeper:
    build: ./zookeeper
    container_name: zookeeper
    command:
      - "start-foreground"
    ports:
      - "2181:2181"

  # kafka:
  #   image: wurstmeister/kafka
  #   links:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_ADVERTISED_HOST_NAME=192.168.99.100
  #     - KAFKA_ADVERTISED_PORT=9092
  #     - KAFKA_CREATE_TOPICS=customer:1:1,audit:1:1
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - JMX_PORT=9999

  kafka:
    build: ./prometheus-kafka
    links:
      - zookeeper
    ports:
      - "9092:9092"
      - "7071:7071"
      - "8089:8089"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: customer:1:1,audit:1:1
      KAFKA_OPTS: -javaagent:/usr/app/jmx_prometheus_javaagent.jar=7071:/usr/app/prom-jmx-agent-config.yml
      JMX_PORT: 9999
      HTTP_PORT: 7071
      JMX_HOST: localhost
      JMX_EXPORTER_CONFIG_FILE: prom-jmx-agent-config.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # kafka-jmx-exporter:
  #   build: ./prometheus-jmx-exporter
  #   ports:
  #     - "8080:8080"
  #   links:
  #     - kafka
  #   environment:
  #     - JMX_PORT=9999
  #     - JMX_HOST=kafka
  #     - HTTP_PORT=8080
  #     - JMX_EXPORTER_CONFIG_FILE=kafka.yml

  #cAdiviser # used to monitor local machine hardware metrics, may not be useful when moved to cloud
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
        - "8080:8080"
    volumes: 
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro 
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk/:/dev/disk:ro
    devices:
        - /dev/kmsg

  # node_exporter
    #### learn more details before use

  influxdb:
      image: influxdb:latest
      container_name: influxdb2
      volumes:
        - ./mount/influxdb/data:/var/lib/influxdb2:rw
  #    env_file:
  #      - .env
  #    entrypoint: ["./entrypoint.sh"]
      ports:
        - 8086:8086
      restart: unless-stopped

  telegraf:
    image: telegraf:1.19
    container_name: telegraf
  #    links:
  #      - influxdb
    volumes:
      #  Sync timezone with host
      - /etc/localtime:/etc/localtime:ro
      #  Map Telegraf configuration file
      - ./mount/influxdb/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      #  Map /tmp to permanent storage  (this includes /tmp/metrics.out)
      - ./mount/influxdb:/tmp:rw
    restart: unless-stopped
    depends_on:
      - influxdb

  grafana:
    #image: grafana/grafana:3.0.1
    image: grafana/grafana:latest
    ports:
      - 3000:3000/tcp
    links:
      - prometheus
      - influxdb
    volumes:
    #   - "graf-db:/var/lib/grafana" #dir removed for latest version
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  prometheus:
    ports:
      - "9090:9090"
    image: prom/prometheus:0.18.0
    #image: prom/prometheus:v2.43.0
    volumes:
      - ./mount/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    restart: unless-stopped
    links:
      #- kafka-jmx-exporter
      - kafka
      - zookeeper
      - cadvisor
      - influxdb


  # graf-db:
  #   command:
  #     - cat
  #   #image: infinityworks/graf-db:08  # https://github.com/infinityworks/graf-db/blob/master/Dockerfile
  #   build: ./graf-db
  #   links:
  #     - prometheus
  #   volumes:
  #     - "graf-db:/var/lib/grafana/"

volumes:
  # graf-db:
  # need to confirm the following setup
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  influxdb-storage:
    driver: local

